import t from"./gameState.js";export default new class{constructor(){this.i18nData={ar:null,en:null},this.challengesData=null,this.locationsData=null,this.isInitialized=!1}async init(){try{const[t,e,n,a]=await Promise.all([fetch("assets/data/i18n/ar.json").then(t=>t.json()),fetch("assets/data/i18n/en.json").then(t=>t.json()),fetch("assets/data/challenges.json").then(t=>t.json()),fetch("assets/data/locations.json").then(t=>t.json())]);this.i18nData.ar=t,this.i18nData.en=e,this.challengesData=n,this.locationsData=a,this.isInitialized=!0,console.log("ContentManager initialized successfully")}catch(t){throw console.error("Failed to initialize ContentManager:",t),t}}bindLanguageSwitchButton(){$("#languageSwitchBtn").on("click",()=>{this.switchLanguage()})}switchLanguage(){if(!this.isInitialized)return void console.error("ContentManager not initialized");const e="ar"===t.currentLanguage?"en":"ar";t.currentLanguage=e,this.updateHtmlAttributes(e),this.updateI18nElements(e),this.updateLocationElements(e),this.updateChallengeElements(e),this.updateLanguageSwitchButton(e),console.log(`Language switched to: ${e}`)}updateHtmlAttributes(t){const e=$("html");e.attr("lang",t),e.attr("dir","ar"===t?"rtl":"ltr");const n=this.getTranslation("pageTitle");document.title=n}updateI18nElements(t){const e=this.i18nData[t];$("[data-i18n]").each((n,a)=>{const s=$(a),i=s.attr("data-i18n"),l=this.getNestedProperty(e,i);if(l){const t=s.attr("data-i18n-attr");t?s.attr(t,l):s.text(l)}else console.warn(`Translation missing for key: ${i} in ${t}`)})}updateLocationElements(t){$("[data-location]").each((e,n)=>{const a=$(n),s=a.attr("data-location"),i=a.attr("data-location-field"),l=this.locationsData.locations.find(t=>t.id===s);if(l&&i){let e;"emoji"===i?e=l.emoji:"name"===i?e="ar"===t?l.nameAr:l.nameEn:"nameAr"===i?e=l.nameAr:"nameEn"===i&&(e=l.nameEn),e&&a.text(e)}else console.warn(`Location not found: ${s}`)})}updateChallengeElements(t){$("[data-challenge-id]").each((e,n)=>{const a=$(n),s=a.attr("data-challenge-id"),i=this.challengesData.challenges.find(t=>t.id===s);if(!i)return void console.warn(`Challenge not found: ${s}`);const l=i[t],o=i.type;l?a.find("[data-challenge-content]").each((t,e)=>{const n=$(e),a=n.attr("data-challenge-content"),i=this.getNestedProperty(l,a);null!=i?this.updateChallengeElement(n,a,i,o):console.warn(`Challenge content missing: ${a} for ${s}`)}):console.warn(`Challenge content missing for ${s} in ${t}`)})}isUrl(t){return"string"==typeof t&&(t.startsWith("http://")||t.startsWith("https://"))}renderVisualElement(t){return this.isUrl(t)?(console.log("hi1"),`<img src="${t}" alt="Challenge Image" class="challenge-emoji-img">`):t}updateChallengeElement(t,e,n,a){if("title"===e||"instructions"===e)t.text(n);else if("visualElements"===e){if(Array.isArray(n))if("letterPIN"===a){const e=t;e.empty(),n.forEach((t,a)=>{const s=this.renderVisualElement(t);e.append(`<div class="challenge-emoji">${s}</div>`),a<n.length-1&&e.append('<div class="challenge-plus">+</div>')})}else if("extractAllWords"===a){const e=this.renderVisualElement(n[0]||"");console.log("hi2"),this.isUrl(n[0])?t.find(".challenge-emoji").html(e):t.find(".challenge-emoji").text(n[0]||"")}else if("guessTheStringFromEmojis"===a){const e=n.map(t=>this.renderVisualElement(t));if(n.some(t=>this.isUrl(t)))t.find("p").html(e.join(""));else{const e=n.join("");t.find("p").text(e)}}}else if("hints"===e){t.data("hints",n)}else if("puzzleData.guessButtons"===e){if(Array.isArray(n)){const e=t;e.empty(),n.forEach(t=>{e.append(`<button class="letter-btn">${t}</button>`)})}}else if("puzzleData.cipherKey"===e){const e=t;e.empty();for(const[t,a]of Object.entries(n))e.append(`\n                    <div class="cipher-item">\n                        <div class="cipher-letter">${t}</div>\n                        <div class="cipher-symbol">${a}</div>\n                    </div>\n                `)}else if("puzzleData.encryptedMessage"===e)t.find("p").text(n);else if("puzzleData.gridLetters"===e){if("string"==typeof n){const e=t;e.empty();for(const t of n)e.append(`<div class="letter-cell">${t}</div>`)}}else"puzzleData.question"===e&&t.find("p").text(n)}updateLanguageSwitchButton(t){const e=$("#languageSwitchBtn");e.attr("data-current-lang",t),"ar"===t?e.text("🌐 English"):e.text("🌐 العربية")}getNestedProperty(t,e){return e.split(".").reduce((t,e)=>t&&void 0!==t[e]?t[e]:void 0,t)}hydratePuzzle(e){const n=this.challengesData.challenges.find(t=>t.id===e);if(!n)return console.error(`Challenge not found: ${e}`),null;const a=n[t.currentLanguage];return{type:n.type,content:a,puzzleData:a.puzzleData}}getLocationName(e){const n=this.locationsData.locations.find(t=>t.id===e);if(!n)return"";return"ar"===t.currentLanguage?n.nameAr:n.nameEn}getTranslation(e){const n=t.currentLanguage,a=this.i18nData[n];return this.getNestedProperty(a,e)||e}getChallengeData(e){const n=this.challengesData.challenges.find(t=>t.id===e);if(!n)return console.error(`Challenge not found: ${e}`),null;const a=n[t.currentLanguage];return{type:n.type,content:a,puzzleData:a.puzzleData}}hydratePuzzle(t){return this.getChallengeData(t)}refreshChallengeContent(t){const e=this.getChallengeData(t);return e?{type:e.type,content:e.content,puzzleData:e.puzzleData,hints:e.content.hints||[]}:null}};