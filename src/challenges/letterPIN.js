import t from"../utils/toast.js";class e{static generateWordSlots(t){let e="";return t.forEach((t,n)=>{if(1===t)e+=`<div class="word-slot" data-word="${n}" data-pos="0"></div>`;else{e+='<div class="flex">';for(let s=0;s<t;s++)e+=`<div class="word-slot" data-word="${n}" data-pos="${s}"></div>`;e+="</div>"}}),e}static renderWordSlots(t,e){const n=$(`[data-challenge-id="${t}"] .word-slots-container`);if(!n.length)return void console.warn(`Word slots container not found for ${t}`);const s=this.generateWordSlots(e);n.empty().html(s)}}export default class{constructor(t,e,n){this.challengeId=t,this.puzzleData=e,this.hints=n,this.currentInput=[],this.solution=e.solution,this.wordStructure=e.wordStructure||[this.solution.length],this.$screen=null}init(){this.$screen=$(`[data-challenge-id="${this.challengeId}"]`),this.$screen.length?(e.renderWordSlots(this.challengeId,this.wordStructure),this.reset(),this.attachEventHandlers(),console.log(`LetterPIN challenge initialized: ${this.challengeId}`)):console.error(`Challenge screen not found: ${this.challengeId}`)}attachEventHandlers(){$(document).on("click",`[data-challenge-id="${this.challengeId}"] .letter-btn`,t=>{this.onLetterClick($(t.currentTarget))}),this.$screen.find(".btn-primary").on("click",()=>{this.checkAnswer()}),this.$screen.find(".hint-btn").on("click",()=>{this.showHint()}),this.$screen.find(".letter-pin-clear-btn").on("click",()=>{this.clearInput()})}onLetterClick(t){const e=t.text();this.currentInput.length>=this.solution.length||(this.currentInput.push(e),t.prop("disabled",!0).addClass("disabled"),this.updateWordSlots())}updateWordSlots(){this.$screen.find(".word-slot").each((t,e)=>{const n=$(e);t<this.currentInput.length?n.text(this.currentInput[t]).addClass("filled"):n.text("").removeClass("filled")})}checkAnswer(){return this.currentInput.join("")===this.solution.join("")?(this.onSuccess(),!0):(this.onFailure(),!1)}onSuccess(){const e="ar"===gameState.currentLanguage?"Ø¥Ø¬Ø§Ø¨Ø© ØµØ­ÙŠØ­Ø©!":"Correct Answer!";t.success(e),setTimeout(()=>{$(document).trigger("challengeComplete",[this.challengeId])},500)}onFailure(){const e="ar"===gameState.currentLanguage?"Ø¥Ø¬Ø§Ø¨Ø© Ø®Ø§Ø·Ø¦Ø©. Ø­Ø§ÙˆÙ„ Ù…Ø±Ø© Ø£Ø®Ø±Ù‰":"Incorrect Answer. Try Again";t.error(e),setTimeout(()=>{this.reset()},500)}showHint(){const e=gameState.hintsUsed[this.challengeId];if(e>=gameState.maxHintsPerChallenge){const e="ar"===gameState.currentLanguage?"Ø§Ù†ØªÙ‡Øª Ø§Ù„ØªÙ„Ù…ÙŠØ­Ø§Øª":"No hints remaining";return void t.warning(e)}const n=this.hints[e];this.displayHintInBox(n),gameState.useHint(this.challengeId),this.updateHintDisplay()}displayHintInBox(t){const e=this.$screen.find(".hints-container"),n=e.find(".hint-btn");e.find(".hint-display").length?e.find(".hint-display").text(`ðŸ’¡ ${t}`):n.before(`<div class="hint-display">ðŸ’¡ ${t}</div>`)}updateHintDisplay(){const t=gameState.getRemainingHints(this.challengeId),e=this.$screen.find(".hints-title"),n="ar"===gameState.currentLanguage?`ðŸ’¡ Ø§Ù„ØªÙ„Ù…ÙŠØ­Ø§Øª Ø§Ù„Ù…ØªØ§Ø­Ø© (${t}/3):`:`ðŸ’¡ Available Hints (${t}/3):`;e.text(n),0===t&&this.$screen.find(".hint-btn").prop("disabled",!0).addClass("disabled")}clearInput(){this.currentInput=[],this.updateWordSlots(),this.$screen.find(".letter-btn").prop("disabled",!1).removeClass("disabled")}reset(){this.currentInput=[],this.updateWordSlots(),this.$screen.find(".letter-btn").prop("disabled",!1).removeClass("disabled"),this.$screen.find(".hint-display").remove(),this.updateHintDisplay()}destroy(){$(document).off("click",`[data-challenge-id="${this.challengeId}"] .letter-btn`),this.$screen.find(".btn-primary").off("click"),this.$screen.find(".hint-btn").off("click"),this.$screen.find(".letter-pin-clear-btn").off("click"),console.log(`LetterPIN challenge destroyed: ${this.challengeId}`)}}